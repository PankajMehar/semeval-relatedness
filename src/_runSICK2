#!/bin/bash

mkdir -p working
SICK=working/sick2
ARFF=working/sim.arff

arrf()
{
    echo "@RELATION sim" > ${ARFF}
    echo "" >> ${ARFF}
    echo "@ATTRIBUTE domsizedif NUMERIC" >> ${ARFF}
    echo "@ATTRIBUTE relsizedif NUMERIC" >> ${ARFF}
    echo "@ATTRIBUTE wordnetdif NUMERIC" >> ${ARFF}
    echo "@ATTRIBUTE wordoverlap NUMERIC" >> ${ARFF}
    echo "@ATTRIBUTE similarity NUMERIC" >> ${ARFF}
    echo "" >> ${ARFF}
    echo "@DATA" >> ${ARFF}
    for I in `ls ${SICK}`; do
	if [ -f ${SICK}/${I}/modsizedif.txt ]; then
	    DSD=`cat ${SICK}/${I}/modsizedif.txt | grep domain | cut -d" " -f1 | sed 's/.$//'`
	    RSD=`cat ${SICK}/${I}/modsizedif.txt | grep relation | cut -d" " -f1 | sed 's/.$//'`
	    WND=`cat ${SICK}/${I}/modsizedif.txt | grep wordnet | cut -d" " -f1 | sed 's/.$//'`
	    OVE=`cat ${SICK}/${I}/modsizedif.txt | grep overlap | cut -d" " -f1 | sed 's/.$//'`
	    SIM=`cat ${SICK}/${I}/gold.sim`
	    echo "${DSD},${RSD},${WND},${OVE},${SIM}" >> ${ARFF}
	    echo "3 k 0.1945 ${RSD} * 1.342 ${WND} * 1.2918 ${OVE} * 1.6516 + + + p" | sed 's/-/_/g' | dc
	fi	
    done
}

puncher()
{
    OPTIONS0="--tp vampire --mb paradox --mbbis mace --contradiction false --copula false --x --info --resolve true"
    OPTIONS1="--tp vampire --mb paradox --mbbis mace --contradiction true  --copula true  --x --info --resolve true"
    OPTIONS2="--tp vampire --mb paradox --mbbis mace --contradiction true  --copula false --x --info --resolve true"
    bin/nc --dir $1 ${OPTIONS0}
    if [ `cat $1/prediction.txt | grep word | wc -l` -gt 0 ]; then
	bin/nc --dir $1 ${OPTIONS1}
	if [ `cat $1/prediction.txt | grep input | wc -l` -gt 0 ]; then
	    bin/nc --dir $1 ${OPTIONS2}
	fi
    fi
    cat ${SICK}/${I}/t | bin/candc --models models/boxer --candc-printer boxer | bin/boxer --box --stdin --format xml --output ${SICK}/${I}/t.xml
}

run()
{
    for I in `ls ${SICK}`; do
	if [ -f ${SICK}/${I}/t ]; then
	    puncher ${SICK}/${I}
	    cat ${SICK}/${I}/t | bin/candc --models models/boxer --candc-printer boxer | bin/boxer --box --stdin --format xml --output ${SICK}/${I}/t.xml
	    if [ `cat ${SICK}/${I}/prediction.txt | grep word | wc -l` -gt 0 ]; then
		par ${I}
	    fi
	fi	
    done
}

init()
{
    for GRAM in 1 2 3 4; do
	echo ${GRAM}
	cat working/ppdb.${GRAM} | tr "\\" "x" \
	    | tr -s " " \
	    | sed "s/'/\\\'/g" \
	    | sed "s/^| /p${GRAM}(['/" \
	    | sed "s/ ||| /'],['/" \
	    | sed "s/ |$/'])./" \
	    | sed "s/ /','/g" > working/ppdb.${GRAM}.pl
    done
    swipl -c src/prolog/nutcracker/para.pl working/sick
}

par()
{
    PARDIR=${SICK}/$1/PARAPHRASE
    PARS=${SICK}/$1/paraphrases.txt
    if [ -f ${PARS} ]; then
	NPAR=`cat ${PARS} | grep . | wc -l`
	if [ ${NPAR} -gt 0 ]; then
	    mkdir -p ${PARDIR}
	    echo "unknown (word)" > ${PARDIR}/prediction.txt
	    cat ${SICK}/$1/h > ${PARDIR}/h
	    for M in `seq 1 ${NPAR}`; do
		echo $M
		if [ `cat ${PARDIR}/prediction.txt | grep word | wc -l` -gt 0 ]; then
		    cat ${PARS} | grep . | head -${M} | tail -1 > ${PARDIR}/t
		    puncher ${PARDIR}
		fi
	    done
	fi
    fi
    if [ `cat ${PARDIR}/prediction.txt | grep proof | wc -l` -gt 0 ]; then
	cp ${PARDIR}/prediction.txt ${SICK}/$1/prediction.txt
	echo "FOUND ALTERNATIVE PROOF FOR $1"
    fi
    if [ `cat ${PARDIR}/prediction.txt | grep inconsistency | wc -l` -gt 0 ]; then
	cp ${PARDIR}/prediction.txt ${SICK}/$1/prediction.txt
	echo "FOUND ALTERNATIVE PROOF FOR $1"
    fi
}
    
#init
run
#arrf
