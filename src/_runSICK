#!/bin/bash

mkdir -p working
SICK=working/sick
ARFF=working/sim.arff
GRAM=2
PARFILE=working/ppdb.${GRAM}
PARTEMP=working/par.tmp

arrf()
{
    echo "@RELATION sim" > ${ARFF}
    echo "" >> ${ARFF}
    echo "@ATTRIBUTE domsizedif NUMERIC" >> ${ARFF}
    echo "@ATTRIBUTE relsizedif NUMERIC" >> ${ARFF}
    echo "@ATTRIBUTE wordnetdif NUMERIC" >> ${ARFF}
    echo "@ATTRIBUTE wordoverlap NUMERIC" >> ${ARFF}
    echo "@ATTRIBUTE similarity NUMERIC" >> ${ARFF}
    echo "" >> ${ARFF}
    echo "@DATA" >> ${ARFF}
    for I in `ls ${SICK}`; do
	if [ -f ${SICK}/${I}/modsizedif.txt ]; then
	    DSD=`cat ${SICK}/${I}/modsizedif.txt | grep domain | cut -d" " -f1 | sed 's/.$//'`
	    RSD=`cat ${SICK}/${I}/modsizedif.txt | grep relation | cut -d" " -f1 | sed 's/.$//'`
	    WND=`cat ${SICK}/${I}/modsizedif.txt | grep wordnet | cut -d" " -f1 | sed 's/.$//'`
	    OVE=`cat ${SICK}/${I}/modsizedif.txt | grep overlap | cut -d" " -f1 | sed 's/.$//'`
	    SIM=`cat ${SICK}/${I}/gold.sim`
	    echo "${DSD},${RSD},${WND},${OVE},${SIM}" >> ${ARFF}
	    echo "3 k 0.1945 ${RSD} * 1.342 ${WND} * 1.2918 ${OVE} * 1.6516 + + + p" | sed 's/-/_/g' | dc
	fi	
    done
}

run()
{
    for I in `ls ${SICK}`; do
	if [ -f ${SICK}/${I}/t ]; then
	    OPTIONS1="--tp vampire --mb paradox --mbbis mace --contradiction --copula --x --info --resolve false"
	    OPTIONS2="--tp vampire --mb paradox --mbbis mace --contradiction --copula --x --info --resolve"
	    bin/nc --dir ${SICK}/${I} ${OPTIONS1}
	    if [ `cat ${SICK}/${I}/prediction.txt | grep word | wc -l` -gt 0 ]; then
		bin/nc --dir ${SICK}/${I} ${OPTIONS2}
#		# PLAN B (Paraphrase substitution)
#		par ${I}
	    fi
	fi	
    done
}

par()
{
    PARDIR=${SICK}/$1/PARAPHRASE
    T=${SICK}/$1/t
    H=${SICK}/$1/h
    LEN=`cat ${T} | tr -s " " | tr " " "\n" | wc -l`
    OPTIONS="--tp vampire --mb paradox --mbbis mace --contradiction --copula --x --info"
    
    mkdir -p ${PARDIR}
    if [ ! -f ${PARDIR}/prediction.txt ]; then
	echo "unknown" > ${PARDIR}/prediction.txt
    fi
    for J in `seq 1 $((1+LEN-GRAM))`; do
	if [ `cat ${PARDIR}/prediction.txt | grep proof | wc -l` -eq 0 ]; then
	    SRC=`cat ${T} | tr "A-Z" "a-z" | tr -s " " | cut -d" " -f${J}-$((J+GRAM-1))`
	    grep "^| ${SRC} |" ${PARFILE} | sort -u > ${PARTEMP}
	    NPAR=`cat ${PARTEMP} | grep . | wc -l`
	    if [ ${NPAR} -gt 0 ]; then
		for M in `seq 1 ${NPAR}`; do
		    if [ `cat ${PARDIR}/prediction.txt | grep proof | wc -l` -eq 0 ]; then
			TGT=`cat ${PARTEMP} | head -${M} | tail -1 | cut -d"|" -f5- | cut -d"|" -f1`
			if [ ! `echo ${TGT} | grep "\." | wc -l` -gt 0 ]; then 
			    if [ `cat ${T} | grep "${TGT}" | wc -l` -eq 0 ]; then 
				MATCHES=`cat ${H} | grep "${TGT}" | wc -l`
				if [ ${MATCHES} -gt 0 ]; then
				    echo "$1: [${SRC}] -> [${TGT}]"
				    cat ${T} | sed "s/${SRC}/${TGT}/" | tr -s " " > ${PARDIR}/t
				    cat ${H} > ${PARDIR}/h
				    bin/nc --dir ${PARDIR} ${OPTION}
				fi
			    fi
			fi
		    fi
		done
	    fi   
	fi
    done
    if [ `cat ${PARDIR}/prediction.txt | grep proof | wc -l` -gt 0 ]; then
	cp ${PARDIR}/prediction.txt ${SICK}/$1/prediction.txt
	echo "FOUND ALTERNATIVE PROOF FOR $1"
    fi
}
    

run
#arrf